// ------------------------------
// Expanded Mock Knowledge Base (15 crops + general queries)
// ------------------------------
const mockData = [
  {
    keywords: ["paddy", "rice"],
    answer: "ЁЯМ╛ Paddy Guide:\n- Best in Ranchi during monsoon.\n- Urea: 40kg/acre in 2 splits (20 & 40 DAS).\n- Needs standing water, irrigate regularly.\n- MOP: 15kg/acre at tillering stage."
  },
  {
    keywords: ["wheat"],
    answer: "ЁЯМ╛ Wheat Guide:\n- Suitable for winter (Rabi season).\n- Urea: 30kg/acre at first irrigation.\n- DAP: 50kg/acre basal dose at sowing.\n- Requires 3тАУ4 irrigations."
  },
  {
    keywords: ["maize", "corn"],
    answer: "ЁЯМ╜ Maize Guide:\n- Grows well in loamy soil with good rainfall.\n- Urea: 30kg/acre at 20 DAS.\n- DAP: 50kg/acre basal dose.\n- Irrigate during tasseling stage."
  },
  {
    keywords: ["gram", "chickpea"],
    answer: "ЁЯМ▒ Gram Guide:\n- Ideal for dry areas.\n- Urea: 20kg/acre at sowing.\n- SSP: 40kg/acre basal dose.\n- Gypsum 100kg/acre before flowering."
  },
  {
    keywords: ["lentil"],
    answer: "ЁЯМ▒ Lentil Guide:\n- Requires cool climate.\n- Urea: 15тАУ20kg/acre basal.\n- SSP: 40kg/acre at sowing.\n- Avoid excess irrigation."
  },
  {
    keywords: ["pigeon pea", "arhar", "toor"],
    answer: "ЁЯМ▒ Pigeon Pea Guide:\n- Good for kharif season.\n- Urea: 20kg/acre at sowing.\n- SSP: 60kg/acre basal.\n- Needs irrigation at flowering."
  },
  {
    keywords: ["mustard"],
    answer: "ЁЯМ╝ Mustard Guide:\n- Best for Rabi season.\n- Urea: 20kg/acre before first irrigation.\n- DAP: 40kg/acre basal.\n- Needs irrigation at flowering stage."
  },
  {
    keywords: ["soybean"],
    answer: "ЁЯМ▒ Soybean Guide:\n- Ideal for JuneтАУJuly sowing.\n- Urea: 15kg/acre basal dose.\n- SSP: 60kg/acre at sowing.\n- Gypsum: 100kg/acre at flowering."
  },
  {
    keywords: ["groundnut", "peanut"],
    answer: "ЁЯеЬ Groundnut Guide:\n- Needs sandy loam soil.\n- Gypsum: 200kg/acre at pegging.\n- SSP: 50kg/acre basal.\n- Avoid waterlogging."
  },
  {
    keywords: ["sorghum", "jowar"],
    answer: "ЁЯМ▒ Sorghum Guide:\n- Drought-tolerant crop.\n- Urea: 20тАУ25kg/acre at 20 DAS.\n- DAP: 40kg/acre basal.\n- Rainfed crop, needs minimal irrigation."
  },
  {
    keywords: ["pearl millet", "bajra"],
    answer: "ЁЯМ▒ Pearl Millet Guide:\n- Grows in sandy soil.\n- Urea: 15тАУ20kg/acre basal.\n- DAP: 35kg/acre at sowing.\n- Irrigate once at flowering."
  },
  {
    keywords: ["potato"],
    answer: "ЁЯеФ Potato Guide:\n- Best in alluvial soil.\n- Urea: 40kg/acre split at 20 & 40 DAS.\n- DAP: 50kg/acre basal.\n- Needs irrigation every 10тАУ12 days."
  },
  {
    keywords: ["sugarcane"],
    answer: "ЁЯМ▒ Sugarcane Guide:\n- Long-duration crop (10тАУ12 months).\n- Urea: 80kg/acre in 3 splits.\n- SSP: 100kg/acre basal.\n- MOP: 40kg/acre at grand growth stage."
  },
  {
    keywords: ["sunflower"],
    answer: "ЁЯМ╗ Sunflower Guide:\n- Short-duration crop (~100 days).\n- Urea: 25kg/acre at 20 DAS.\n- SSP: 40kg/acre basal.\n- MOP: 20kg/acre at flowering."
  },
  {
    keywords: ["blackgram", "urad"],
    answer: "ЁЯМ▒ Blackgram Guide:\n- Best in kharif season.\n- Urea: 10тАУ15kg/acre at sowing.\n- SSP: 30тАУ40kg/acre basal.\n- Requires moist soil but avoid waterlogging."
  },
  {
    keywords: ["weather", "rain", "forecast"],
    answer: "ЁЯМжя╕П Weather Update: This week shows moderate rainfall with temperatures between 26тАУ32┬░C. Good conditions for sowing kharif crops."
  },
  {
    keywords: ["market", "price", "mandi"],
    answer: "ЁЯТ░ Market Update: Paddy тВ╣1800/quintal (Rising), Wheat тВ╣2200/quintal (Stable), Mustard тВ╣4200/quintal (Rising)."
  },
  {
    keywords: ["hello", "hi", "namaste"],
    answer: "ЁЯСЛ Namaste! I am your Krishi Saathi. Ask me about crops, fertilizers, weather, or market prices."
  },
  {
    keywords: ["thank you", "thanks", "dhanyavaad"],
    answer: "ЁЯЩП Always happy to help! Wish you a great harvest ЁЯМ▒."
  }
];
// ------------------------------
// рд╡рд┐рд╕реНрддреГрдд рд╣рд┐рдВрджреА Mock Knowledge Base
// ------------------------------
const hindiMockData = [
  // ЁЯМ╛ рдлрд╕рд▓ рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛
  {
    keywords: ["рдзрд╛рди", "рдЪрд╛рд╡рд▓"],
    answer: "ЁЯМ╛ рдзрд╛рди рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рдорд╛рдирд╕реВрди рдореЗрдВ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ред\n- рдпреВрд░рд┐рдпрд╛: 40kg/рдПрдХрдбрд╝ (20 рдФрд░ 40 DAS рдкрд░)ред\n- рдЦреЗрдд рдореЗрдВ рд╣рдореЗрд╢рд╛ рдкрд╛рдиреА рдмрдирд╛рдП рд░рдЦреЗрдВред"
  },
  {
    keywords: ["рдЧреЗрд╣реВрдВ"],
    answer: "ЁЯМ╛ рдЧреЗрд╣реВрдВ рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рд░рдмреА рд╕реАрдЬрди рдореЗрдВ рдмреЛрдпрд╛ рдЬрд╛рддрд╛ рд╣реИред\n- рдпреВрд░рд┐рдпрд╛: рдкрд╣рд▓реА рд╕рд┐рдВрдЪрд╛рдИ рдкрд░ 30kg/рдПрдХрдбрд╝ред\n- рдбреАрдПрдкреА: 50kg/рдПрдХрдбрд╝ рдмреБрдЖрдИ рдХреЗ рд╕рдордпред"
  },
  {
    keywords: ["рдордХреНрдХрд╛", "рднреБрдЯреНрдЯрд╛"],
    answer: "ЁЯМ╜ рдордХреНрдХрд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рдмрд▓реБрдИ рджреЛрдордЯ рдорд┐рдЯреНрдЯреА рдореЗрдВ рдЕрдЪреНрдЫрд╛ рд╣реЛрддрд╛ рд╣реИред\n- рдпреВрд░рд┐рдпрд╛: 20 DAS рдкрд░ 30kg/рдПрдХрдбрд╝ред\n- рдлреВрд▓ рдЖрдиреЗ рдХреЗ рд╕рдордп рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВред"
  },
  {
    keywords: ["рдЪрдирд╛"],
    answer: "ЁЯМ▒ рдЪрдирд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рд╢реБрд╖реНрдХ рдХреНрд╖реЗрддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрддред\n- рдпреВрд░рд┐рдпрд╛: рдмреБрдЖрдИ рдХреЗ рд╕рдордп 20kg/рдПрдХрдбрд╝ред\n- рдПрд╕рдПрд╕рдкреА: 40kg/рдПрдХрдбрд╝ред"
  },
  {
    keywords: ["рдорд╕реВрд░"],
    answer: "ЁЯМ▒ рдорд╕реВрд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рдардВрдбрд╛ рдореМрд╕рдо рдЪрд╛рд╣рд┐рдПред\n- рдпреВрд░рд┐рдпрд╛: 15тАУ20kg/рдПрдХрдбрд╝ред\n- рдкрд╛рдиреА рдЬреНрдпрд╛рджрд╛ рди рджреЗрдВред"
  },
  {
    keywords: ["рд╕рд░рд╕реЛрдВ"],
    answer: "ЁЯМ╝ рд╕рд░рд╕реЛрдВ рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рд░рдмреА рдлрд╕рд▓ред\n- рдпреВрд░рд┐рдпрд╛: 20kg/рдПрдХрдбрд╝ рдкрд╣рд▓реА рд╕рд┐рдВрдЪрд╛рдИ рд╕реЗ рдкрд╣рд▓реЗред\n- рдбреАрдПрдкреА: 40kg/рдПрдХрдбрд╝ред"
  },
  {
    keywords: ["рд╕реЛрдпрд╛рдмреАрди"],
    answer: "ЁЯМ▒ рд╕реЛрдпрд╛рдмреАрди рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рдЬреВрдитАУрдЬреБрд▓рд╛рдИ рдореЗрдВ рдмреБрдЖрдИред\n- рдпреВрд░рд┐рдпрд╛: 15kg/рдПрдХрдбрд╝ред\n- рдПрд╕рдПрд╕рдкреА: 60kg/рдПрдХрдбрд╝ред"
  },
  {
    keywords: ["рдореВрдВрдЧрдлрд▓реА"],
    answer: "ЁЯеЬ рдореВрдВрдЧрдлрд▓реА рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рд░реЗрддреАрд▓реА рджреЛрдордЯ рдорд┐рдЯреНрдЯреА рдореЗрдВ рдЕрдЪреНрдЫреАред\n- рдЬрд┐рдкреНрд╕рдо: 200kg/рдПрдХрдбрд╝ред\n- рдПрд╕рдПрд╕рдкреА: 50kg/рдПрдХрдбрд╝ред"
  },
  {
    keywords: ["рдЬреНрд╡рд╛рд░"],
    answer: "ЁЯМ▒ рдЬреНрд╡рд╛рд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рд╕реВрдЦрд╛ рд╕рд╣рдирд╢реАрд▓ рдлрд╕рд▓ред\n- рдпреВрд░рд┐рдпрд╛: 20тАУ25kg/рдПрдХрдбрд╝ред\n- рдбреАрдПрдкреА: 40kg/рдПрдХрдбрд╝ред"
  },
  {
    keywords: ["рдмрд╛рдЬрд░рд╛"],
    answer: "ЁЯМ▒ рдмрд╛рдЬрд░рд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рд░реЗрддреАрд▓реА рдорд┐рдЯреНрдЯреА рдореЗрдВ рдЕрдЪреНрдЫрд╛ред\n- рдпреВрд░рд┐рдпрд╛: 15тАУ20kg/рдПрдХрдбрд╝ред\n- рдбреАрдПрдкреА: 35kg/рдПрдХрдбрд╝ред"
  },
  {
    keywords: ["рдЖрд▓реВ"],
    answer: "ЁЯеФ рдЖрд▓реВ рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рджреЛрдордЯ рдорд┐рдЯреНрдЯреА рдореЗрдВ рдЙрдкрдпреБрдХреНрддред\n- рдпреВрд░рд┐рдпрд╛: 40kg/рдПрдХрдбрд╝ (рджреЛ рдмрд╛рд░)ред\n- рд╣рд░ 10тАУ12 рджрд┐рди рдореЗрдВ рд╕рд┐рдВрдЪрд╛рдИред"
  },
  {
    keywords: ["рдЧрдиреНрдирд╛"],
    answer: "ЁЯМ▒ рдЧрдиреНрдирд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рд▓рдВрдмреА рдЕрд╡рдзрд┐ рдХреА рдлрд╕рд▓ (10тАУ12 рдорд╣реАрдиреЗ)ред\n- рдпреВрд░рд┐рдпрд╛: 80kg/рдПрдХрдбрд╝ (3 рдмрд╛рд░ рдореЗрдВ)ред\n- рдПрд╕рдПрд╕рдкреА: 100kg/рдПрдХрдбрд╝ред"
  },
  {
    keywords: ["рд╕реВрд░рдЬрдореБрдЦреА"],
    answer: "ЁЯМ╗ рд╕реВрд░рдЬрдореБрдЦреА рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- 100 рджрд┐рди рдореЗрдВ рддреИрдпрд╛рд░ред\n- рдпреВрд░рд┐рдпрд╛: 25kg/рдПрдХрдбрд╝ред\n- рдлреВрд▓ рдЖрдиреЗ рдкрд░ рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВред"
  },
  {
    keywords: ["рдЙрдбрд╝рдж", "рдХрд╛рд▓рд╛ рдЪрдирд╛"],
    answer: "ЁЯМ▒ рдЙрдбрд╝рдж рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рдЦрд░реАрдл рд╕реАрдЬрди рдореЗрдВ рдЕрдЪреНрдЫреАред\n- рдпреВрд░рд┐рдпрд╛: 10тАУ15kg/рдПрдХрдбрд╝ред\n- рдПрд╕рдПрд╕рдкреА: 30тАУ40kg/рдПрдХрдбрд╝ред"
  },

  // ЁЯМжя╕П рдореМрд╕рдо
  {
    keywords: ["рдореМрд╕рдо", "рдмрд╛рд░рд┐рд╢", "рддрд╛рдкрдорд╛рди", "рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди"],
    answer: "ЁЯМжя╕П рдореМрд╕рдо рдЕрдкрдбреЗрдЯ:\n- рдЗрд╕ рд╣рдлреНрддреЗ рд╣рд▓реНрдХреА рдмрд╛рд░рд┐рд╢ред\n- рддрд╛рдкрдорд╛рди 26тАУ32┬░Cред\n- рдЦрд░реАрдл рдлрд╕рд▓ рдмреЛрдиреЗ рдХрд╛ рд╕рд╣реА рд╕рдордпред"
  },
  {
    keywords: ["рдЖрдЬ рдХрд╛ рдореМрд╕рдо"],
    answer: "ЁЯМдя╕П рдЖрдЬ рдХрд╛ рдореМрд╕рдо: рдзреВрдк рдХреЗ рд╕рд╛рде рдмрд╛рджрд▓, рд╣рд▓реНрдХреА рдмреВрдВрджрд╛рдмрд╛рдВрджреА рдХреА рд╕рдВрднрд╛рд╡рдирд╛ред"
  },

  // ЁЯТ░ рдордВрдбреА рднрд╛рд╡
  {
    keywords: ["рдмрд╛рдЬрд╛рд░", "рднрд╛рд╡", "рдордВрдбреА"],
    answer: "ЁЯТ░ рдордВрдбреА рднрд╛рд╡:\n- рдзрд╛рди тВ╣1800/рдХреНрд╡рд┐рдВрдЯрд▓ (рдмрдврд╝рдд)\n- рдЧреЗрд╣реВрдВ тВ╣2200/рдХреНрд╡рд┐рдВрдЯрд▓ (рд╕реНрдерд┐рд░)\n- рд╕рд░рд╕реЛрдВ тВ╣4200/рдХреНрд╡рд┐рдВрдЯрд▓ (рдмрдврд╝рдд)"
  },
  {
    keywords: ["рдЖрдЬ рдХрд╛ рднрд╛рд╡", "рдордВрдбреА рдЕрдкрдбреЗрдЯ"],
    answer: "ЁЯУК рдордВрдбреА рдЕрдкрдбреЗрдЯ:\n- рдордХреНрдХрд╛ тВ╣1700/рдХреНрд╡рд┐рдВрдЯрд▓\n- рдЪрдирд╛ тВ╣4600/рдХреНрд╡рд┐рдВрдЯрд▓\n- рдореВрдВрдЧрдлрд▓реА тВ╣5200/рдХреНрд╡рд┐рдВрдЯрд▓"
  },

  // ЁЯЩЛ рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╢реНрди
  {
    keywords: ["рдирдорд╕реНрддреЗ", "рд╣реИрд▓реЛ", "рд╕реБрдкреНрд░рднрд╛рдд", "рд░рд╛рдо рд░рд╛рдо"],
    answer: "ЁЯСЛ рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдБред рдлрд╕рд▓, рдЦрд╛рдж, рдореМрд╕рдо рдФрд░ рдордВрдбреА рднрд╛рд╡ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВред"
  },
  {
    keywords: ["рдзрдиреНрдпрд╡рд╛рдж", "рд╢реБрдХреНрд░рд┐рдпрд╛"],
    answer: "ЁЯЩП рдЖрдкрдХреА рдорджрдж рдХрд░рдХреЗ рдЦреБрд╢реА рд╣реБрдИред рдЕрдЪреНрдЫреА рдлрд╕рд▓ рд╣реЛ ЁЯМ▒ред"
  },
  {
    keywords: ["рдЦрд╛рдж", "рдЙрд░реНрд╡рд░рдХ"],
    answer: "ЁЯзк рдЦрд╛рдж рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛:\n- рдирд╛рдЗрдЯреНрд░реЛрдЬрди рд╡реГрджреНрдзрд┐ рдХреЗ рд▓рд┐рдПред\n- рдлреЙрд╕реНрдлреЛрд░рд╕ рдЬрдбрд╝ рдХреЗ рд▓рд┐рдПред\n- рдкреЛрдЯрд╛рд╢ рдлреВрд▓ рдФрд░ рдлрд▓ рдХреЗ рд▓рд┐рдПред"
  },
  {
    keywords: ["рд╕рд┐рдВрдЪрд╛рдИ"],
    answer: "ЁЯТз рд╕рд┐рдВрдЪрд╛рдИ рд╕реБрдЭрд╛рд╡:\n- рд╕реБрдмрд╣ рдпрд╛ рд╢рд╛рдо рдХреЛ рдХрд░реЗрдВред\n- рдмрд╛рдврд╝ рдЬреИрд╕реА рд╕реНрдерд┐рддрд┐ рди рдмрдирд╛рдПрдВред\n- рдбреНрд░рд┐рдк рд╕рд┐рд╕реНрдЯрдо рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ред"
  },
  {
    keywords: ["рдХреАрдЯ", "рд░реЛрдЧ"],
    answer: "ЁЯРЫ рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг:\n- рдиреАрдо рдХрд╛ рдШреЛрд▓ рдЫрд┐рдбрд╝рдХреЗрдВред\n- рд╕рдВрддреБрд▓рд┐рдд рдЙрд░реНрд╡рд░рдХ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред\n- рд░реЛрдЧреА рдкреМрдзреЛрдВ рдХреЛ рдЕрд▓рдЧ рдХрд░реЗрдВред"
  }
];


// ------------------------------
// DOM Elements
// ------------------------------
const chatWindow = document.getElementById("chatWindow");
const userInput = document.getElementById("userInput");
const sendBtn = document.getElementById("sendBtn");
const voiceBtn = document.getElementById("voiceBtn");

let availableVoices = [];

function loadVoices() {
  availableVoices = speechSynthesis.getVoices();

  // Example: log them in console so you see names
  console.log("Available voices:");
  availableVoices.forEach((v, i) => console.log(i, v.name, v.lang));
}

// Voices load async
speechSynthesis.onvoiceschanged = loadVoices;


// ------------------------------
// Utility: Add Message
// ------------------------------
function addMessage(sender, text) {
  const msgDiv = document.createElement("div");
  msgDiv.className = `message ${sender}`;
  msgDiv.innerHTML = `<div class="bubble">${text.replace(/\n/g, "<br>")}</div>`;
  chatWindow.appendChild(msgDiv);
  chatWindow.scrollTop = chatWindow.scrollHeight;
}

// ------------------------------
// Bot Reply (Flexible Matching)
// ------------------------------
function getBotResponse(input) {
  const query = input.toLowerCase();

  // ЁЯФ╣ Search in English mock data
  for (let item of mockData) {
    for (let kw of item.keywords) {
      if (query.includes(kw)) {
        return item.answer;
      }
    }
  }

  // ЁЯФ╣ Search in Hindi mock data
  for (let item of hindiMockData) {
    for (let kw of item.keywords) {
      if (query.includes(kw)) {
        return item.answer;
      }
    }
  }

  // ЁЯФ╣ Default fallback (bilingual)
  return "ЁЯдФ рдЕрднреА рдореЗрд░реЗ рдкрд╛рд╕ рдЗрд╕рдХреА рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдлрд╕рд▓, рдЦрд╛рдж, рдореМрд╕рдо рдпрд╛ рдордВрдбреА рднрд╛рд╡ рдкреВрдЫреЗрдВред\nOr, you can ask me about crops, fertilizers, weather, or market prices.";
}


// ------------------------------
// Handle User Input
// ------------------------------
function handleUserInput() {
  const text = userInput.value.trim();
  if (!text) return;

  addMessage("user", text);
  userInput.value = "";

  setTimeout(() => {
    const response = getBotResponse(text);
    addMessage("bot", response);
    speakText(response);
  }, 600);
}

sendBtn.addEventListener("click", handleUserInput);
userInput.addEventListener("keypress", (e) => {
  if (e.key === "Enter") handleUserInput();
});

// ------------------------------
// Voice Input (Speech-to-Text)
// ------------------------------
// ------------------------------
// Voice Input (Speech-to-Text) with Language Selector
// ------------------------------
const langSelect = document.getElementById("langSelect");

voiceBtn.addEventListener("click", () => {
  if (!('webkitSpeechRecognition' in window)) {
    alert("Your browser does not support speech recognition.");
    return;
  }

  const recognition = new webkitSpeechRecognition();
  recognition.lang = langSelect.value;  // ЁЯФ╣ user-selected language
  recognition.start();

  recognition.onresult = (event) => {
    const transcript = event.results[0][0].transcript;
    addMessage("user", transcript);

    setTimeout(() => {
      const response = getBotResponse(transcript);
      addMessage("bot", response);
      speakText(response);
    }, 600);
  };

  recognition.onerror = () => {
    alert("Speech recognition error. Please try again.");
  };



  recognition.onresult = (event) => {
    const transcript = event.results[0][0].transcript;
    addMessage("user", transcript);

    setTimeout(() => {
      const response = getBotResponse(transcript);
      addMessage("bot", response);
      speakText(response);
    }, 600);
  };

  recognition.onerror = () => {
    alert("Speech recognition error. Please try again.");
  };
});

// ------------------------------
// Bot Voice Output (Text-to-Speech)
// ------------------------------
function speakText(text) {
  if (!window.speechSynthesis) return;
  const utterance = new SpeechSynthesisUtterance(text);

  // Detect Hindi vs English
  if (/[рдА-ре┐]/.test(text)) {
    utterance.lang = "hi-IN";
  } else {
    utterance.lang = "en-IN";
  }

  // Try to pick a better English voice
  if (utterance.lang === "en-IN") {
    const preferred = availableVoices.find(v =>
      v.name.includes("Google UK English Female") ||
      v.name.includes("Google US English") ||
      v.name.includes("Microsoft") // fallback
    );
    if (preferred) utterance.voice = preferred;
  }

  // Try to pick a better Hindi voice
  if (utterance.lang === "hi-IN") {
    const preferredHindi = availableVoices.find(v =>
      v.lang === "hi-IN"
    );
    if (preferredHindi) utterance.voice = preferredHindi;
  }

  // Adjust speaking style
  utterance.rate = 0.95;   // slower, more natural
  utterance.pitch = 1.0;   // normal pitch
  utterance.volume = 1;    // full volume

  speechSynthesis.speak(utterance);
}


document.getElementById("menuToggle").addEventListener("click", () => {
  document.querySelector(".nav-links").classList.toggle("active");
});

